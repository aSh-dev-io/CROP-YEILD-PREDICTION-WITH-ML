# -*- coding: utf-8 -*-
"""Crop Yield Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TEe_cH-5Nahu9LToBmbYstvK1CNFUkGs
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder,StandardScaler,OneHotEncoder
from sklearn.linear_model import LinearRegression,Lasso,Ridge
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_absolute_error,r2_score,classification_report
from sklearn.model_selection import train_test_split
from sklearn.compose import ColumnTransformer
import pickle

df=pd.read_csv('/content/yield_df.csv')
df

df.columns

df.drop(['Unnamed: 0'],axis=1,inplace=True)

df.info()

def unique_val(df, columns):
    for col in columns:
        if col not in df.columns:
            raise ValueError(f"Column {col} not found in DataFrame")
    return {col: df[col].unique().tolist() for col in columns}

unique_val(df, ['Area', 'Item', 'Year'])

df.duplicated().sum()

df.drop_duplicates(inplace=True)

plt.figure(figsize=(12,12))
plt.plot(df['Year'],df['hg/ha_yield'])
plt.show()

corr_=df[['Year', 'hg/ha_yield','average_rain_fall_mm_per_year', 'pesticides_tonnes', 'avg_temp']].corr()
plt.figure(figsize=(6,6))
sns.heatmap(corr_,annot=True)
plt.show()

plt.figure(figsize=(24,12))
sns.boxplot(x='Area', y='hg/ha_yield', data=df)
plt.xticks(rotation=90)

plt.tight_layout()
plt.show()

df.describe()

plt.figure(figsize=(24,24))
sns.countplot(y=df['Area'])
plt.show()

plt.figure(figsize=(6,6))
sns.countplot(y=df['Item'])
plt.show()



X=df.drop(['hg/ha_yield'],axis=True)
Y=df['hg/ha_yield']

x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=.05,shuffle=True,random_state=42)

print(x_train.shape)
print(y_train.shape)
print(x_test.shape)
print(y_test.shape)

encoder=OneHotEncoder(drop='first')
scaleing=StandardScaler()

x_train.head(5)

preprocesser = ColumnTransformer(
        transformers = [
            ('StandardScale', scaleing, [2,3,4,5]),
            ('OHE', encoder, [0, 1]),
        ],
        remainder='passthrough'
)

preprocesser

dummy_x_train=preprocesser.fit_transform(x_train)
dummy_x_test=preprocesser.transform(x_test)

models = {
    'lr': LinearRegression(),
    'lss': Lasso(max_iter=10000),
     'Rid': Ridge(solver="lsqr"),

    'Dtr': DecisionTreeRegressor()
}

for name, md in models.items():
    md.fit(dummy_x_train, y_train)
    y_pred = md.predict(dummy_x_test)
    print(f"{name} : mae : {mean_absolute_error(y_test, y_pred)} score : {r2_score(y_test, y_pred)}")

dtr=DecisionTreeRegressor()
dtr.fit(dummy_x_train,y_train)

pred=dtr.predict(dummy_x_test)

print(r2_score(pred,y_test))

x_train.head(1)

def prediction(Area,Item,Year,average_rain_fall_mm_per_year,pesticides_tonnes,avg_temp):
    feature=np.array([[Area,Item,Year,average_rain_fall_mm_per_year,pesticides_tonnes,avg_temp]])
    trans_feat=preprocesser.transform(feature)
    return (dtr.predict(trans_feat)).reshape(1,-1)

Year = 1990
average_rain_fall_mm_per_year =1485.0
pesticides_tonnes = 121.00
avg_temp = 16.37
Area = 'Albania'
Item = 'Maize'
result = prediction(Area,Item,Year,average_rain_fall_mm_per_year,pesticides_tonnes,avg_temp)

result

pickle.dump(dtr,open('dtr.pkl','wb'))
pickle.dump(preprocesser,open('preprocessor.pkl','wb'))

