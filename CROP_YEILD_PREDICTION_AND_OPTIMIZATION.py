{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNsLwmP1OBGLYKBO29/BySE",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/aSh-dev-io/CROP-YEILD-PREDICTION-WITH-ML/blob/main/CROP_YEILD_PREDICTION_AND_OPTIMIZATION.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "q52dL-XCyXcr"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.ensemble import GradientBoostingRegressor\n",
        "from sklearn.neural_network import MLPRegressor\n",
        "from sklearn.metrics import r2_score, mean_absolute_error\n",
        "import pickle"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "try:\n",
        "    df = pd.read_excel('/content/odisha_agri_data.xlsx')\n",
        "    print(\"✅ Data loaded successfully!\")\n",
        "    print(\"Here is a preview of your dataset:\")\n",
        "    display(df.head())\n",
        "    print(\"\\nDataset Information:\")\n",
        "    df.info()\n",
        "except FileNotFoundError:\n",
        "    print(\"❌ Error: The file 'odisha_agri_data.xlsx - Sheet1.csv' was not found.\")\n",
        "    print(\"Please make sure the file is in the correct directory.\")\n",
        "except Exception as e:\n",
        "    print(f\"An error occurred: {e}\")\n",
        "\n",
        "if 'df' in locals():\n",
        "    total_rows, total_columns = df.shape\n",
        "\n",
        "    print(f\"✅ Confirmation: All data is loaded.\")\n",
        "    print(f\"Total number of rows: {total_rows}\")\n",
        "    print(f\"Total number of columns: {total_columns}\")\n",
        "\n",
        "\n",
        "else:\n",
        "    print(\"❌ Error: DataFrame 'df' not found. Please run the data loading step first.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 782
        },
        "collapsed": true,
        "id": "6pTKSlyP0ST-",
        "outputId": "c06a83f7-6918-4f39-8688-9128fbea16b8"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Data loaded successfully!\n",
            "Here is a preview of your dataset:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "    State       Item  Year sowing_date  area_hectares irrigation_type   pH  \\\n",
              "0  Odisha  Groundnut  2019  03-06-2019              6           Canal  5.9   \n",
              "1  Odisha       Rice  2018  21-06-2018              3            Drip  5.6   \n",
              "2  Odisha  Groundnut  2019  23-06-2019              4           Canal  6.3   \n",
              "3  Odisha  Groundnut  2014  05-06-2014              8         Rainfed  5.6   \n",
              "4  Odisha       Rice  2011  21-06-2011              7           Canal  7.3   \n",
              "\n",
              "   N_kg_ha  P_kg_ha  K_kg_ha  organic_carbon_%  moisture_%  ndvi   evi  \\\n",
              "0      148       70       70              1.09        44.9  0.57  0.60   \n",
              "1      101       85       59              1.07        35.9  0.66  0.56   \n",
              "2      146       41       46              0.74        26.5  0.33  0.43   \n",
              "3      105       90       78              0.58        37.1  0.37  0.57   \n",
              "4       95       89       49              0.72        42.5  0.37  0.20   \n",
              "\n",
              "   average_rain_fall_mm_per_year  pesticides_tonnes  avg_temp  \\\n",
              "0                         1046.8               11.0      34.7   \n",
              "1                         1013.3               12.8      28.3   \n",
              "2                          915.3               17.6      33.8   \n",
              "3                         1173.9               15.1      27.6   \n",
              "4                         1139.4               16.0      26.6   \n",
              "\n",
              "   historical_yield_hg_ha  \n",
              "0                 3817.88  \n",
              "1                 4778.90  \n",
              "2                 3953.23  \n",
              "3                 4744.88  \n",
              "4                 4550.12  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a72e80b2-28fa-4ebf-93ca-a5bcc07edb43\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>State</th>\n",
              "      <th>Item</th>\n",
              "      <th>Year</th>\n",
              "      <th>sowing_date</th>\n",
              "      <th>area_hectares</th>\n",
              "      <th>irrigation_type</th>\n",
              "      <th>pH</th>\n",
              "      <th>N_kg_ha</th>\n",
              "      <th>P_kg_ha</th>\n",
              "      <th>K_kg_ha</th>\n",
              "      <th>organic_carbon_%</th>\n",
              "      <th>moisture_%</th>\n",
              "      <th>ndvi</th>\n",
              "      <th>evi</th>\n",
              "      <th>average_rain_fall_mm_per_year</th>\n",
              "      <th>pesticides_tonnes</th>\n",
              "      <th>avg_temp</th>\n",
              "      <th>historical_yield_hg_ha</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Odisha</td>\n",
              "      <td>Groundnut</td>\n",
              "      <td>2019</td>\n",
              "      <td>03-06-2019</td>\n",
              "      <td>6</td>\n",
              "      <td>Canal</td>\n",
              "      <td>5.9</td>\n",
              "      <td>148</td>\n",
              "      <td>70</td>\n",
              "      <td>70</td>\n",
              "      <td>1.09</td>\n",
              "      <td>44.9</td>\n",
              "      <td>0.57</td>\n",
              "      <td>0.60</td>\n",
              "      <td>1046.8</td>\n",
              "      <td>11.0</td>\n",
              "      <td>34.7</td>\n",
              "      <td>3817.88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Odisha</td>\n",
              "      <td>Rice</td>\n",
              "      <td>2018</td>\n",
              "      <td>21-06-2018</td>\n",
              "      <td>3</td>\n",
              "      <td>Drip</td>\n",
              "      <td>5.6</td>\n",
              "      <td>101</td>\n",
              "      <td>85</td>\n",
              "      <td>59</td>\n",
              "      <td>1.07</td>\n",
              "      <td>35.9</td>\n",
              "      <td>0.66</td>\n",
              "      <td>0.56</td>\n",
              "      <td>1013.3</td>\n",
              "      <td>12.8</td>\n",
              "      <td>28.3</td>\n",
              "      <td>4778.90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Odisha</td>\n",
              "      <td>Groundnut</td>\n",
              "      <td>2019</td>\n",
              "      <td>23-06-2019</td>\n",
              "      <td>4</td>\n",
              "      <td>Canal</td>\n",
              "      <td>6.3</td>\n",
              "      <td>146</td>\n",
              "      <td>41</td>\n",
              "      <td>46</td>\n",
              "      <td>0.74</td>\n",
              "      <td>26.5</td>\n",
              "      <td>0.33</td>\n",
              "      <td>0.43</td>\n",
              "      <td>915.3</td>\n",
              "      <td>17.6</td>\n",
              "      <td>33.8</td>\n",
              "      <td>3953.23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Odisha</td>\n",
              "      <td>Groundnut</td>\n",
              "      <td>2014</td>\n",
              "      <td>05-06-2014</td>\n",
              "      <td>8</td>\n",
              "      <td>Rainfed</td>\n",
              "      <td>5.6</td>\n",
              "      <td>105</td>\n",
              "      <td>90</td>\n",
              "      <td>78</td>\n",
              "      <td>0.58</td>\n",
              "      <td>37.1</td>\n",
              "      <td>0.37</td>\n",
              "      <td>0.57</td>\n",
              "      <td>1173.9</td>\n",
              "      <td>15.1</td>\n",
              "      <td>27.6</td>\n",
              "      <td>4744.88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Odisha</td>\n",
              "      <td>Rice</td>\n",
              "      <td>2011</td>\n",
              "      <td>21-06-2011</td>\n",
              "      <td>7</td>\n",
              "      <td>Canal</td>\n",
              "      <td>7.3</td>\n",
              "      <td>95</td>\n",
              "      <td>89</td>\n",
              "      <td>49</td>\n",
              "      <td>0.72</td>\n",
              "      <td>42.5</td>\n",
              "      <td>0.37</td>\n",
              "      <td>0.20</td>\n",
              "      <td>1139.4</td>\n",
              "      <td>16.0</td>\n",
              "      <td>26.6</td>\n",
              "      <td>4550.12</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a72e80b2-28fa-4ebf-93ca-a5bcc07edb43')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a72e80b2-28fa-4ebf-93ca-a5bcc07edb43 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a72e80b2-28fa-4ebf-93ca-a5bcc07edb43');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-6cbe9390-d2f5-4aa2-963f-d00b09b278a3\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6cbe9390-d2f5-4aa2-963f-d00b09b278a3')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-6cbe9390-d2f5-4aa2-963f-d00b09b278a3 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    print(\\\"\\u274c Error: DataFrame 'df' not found\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"State\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Odisha\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Item\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Rice\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 2011,\n        \"max\": 2019,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2018\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sowing_date\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"21-06-2018\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"area_hectares\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 3,\n        \"max\": 8,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"irrigation_type\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Canal\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7092249290598859,\n        \"min\": 5.6,\n        \"max\": 7.3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          5.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"N_kg_ha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25,\n        \"min\": 95,\n        \"max\": 148,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          101\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"P_kg_ha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20,\n        \"min\": 41,\n        \"max\": 90,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          85\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"K_kg_ha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 46,\n        \"max\": 78,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          59\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"organic_carbon_%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.22770595073471406,\n        \"min\": 0.58,\n        \"max\": 1.09,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.07\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"moisture_%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.131058827411256,\n        \"min\": 26.5,\n        \"max\": 44.9,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          35.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ndvi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.14594519519326424,\n        \"min\": 0.33,\n        \"max\": 0.66,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.66\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"evi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.16543881044059763,\n        \"min\": 0.2,\n        \"max\": 0.6,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.56\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"average_rain_fall_mm_per_year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 103.13250215135874,\n        \"min\": 915.3,\n        \"max\": 1173.9,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1013.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pesticides_tonnes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.6153393661244047,\n        \"min\": 11.0,\n        \"max\": 17.6,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          12.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_temp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.7596542394214922,\n        \"min\": 26.6,\n        \"max\": 34.7,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          28.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"historical_yield_hg_ha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 452.4119212841323,\n        \"min\": 3817.88,\n        \"max\": 4778.9,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4778.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Dataset Information:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 50 entries, 0 to 49\n",
            "Data columns (total 18 columns):\n",
            " #   Column                         Non-Null Count  Dtype  \n",
            "---  ------                         --------------  -----  \n",
            " 0   State                          50 non-null     object \n",
            " 1   Item                           50 non-null     object \n",
            " 2   Year                           50 non-null     int64  \n",
            " 3   sowing_date                    50 non-null     object \n",
            " 4   area_hectares                  50 non-null     int64  \n",
            " 5   irrigation_type                50 non-null     object \n",
            " 6   pH                             50 non-null     float64\n",
            " 7   N_kg_ha                        50 non-null     int64  \n",
            " 8   P_kg_ha                        50 non-null     int64  \n",
            " 9   K_kg_ha                        50 non-null     int64  \n",
            " 10  organic_carbon_%               50 non-null     float64\n",
            " 11  moisture_%                     50 non-null     float64\n",
            " 12  ndvi                           50 non-null     float64\n",
            " 13  evi                            50 non-null     float64\n",
            " 14  average_rain_fall_mm_per_year  50 non-null     float64\n",
            " 15  pesticides_tonnes              50 non-null     float64\n",
            " 16  avg_temp                       50 non-null     float64\n",
            " 17  historical_yield_hg_ha         50 non-null     float64\n",
            "dtypes: float64(9), int64(5), object(4)\n",
            "memory usage: 7.2+ KB\n",
            "✅ Confirmation: All data is loaded.\n",
            "Total number of rows: 50\n",
            "Total number of columns: 18\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "if 'df' in locals():\n",
        "    print(\"--- 1. Checking for Missing Values ---\")\n",
        "    print(df.isnull().sum())\n",
        "\n",
        "    print(\"\\n\\n--- 2. Statistical Summary of Numerical Columns ---\")\n",
        "    display(df.describe())\n",
        "\n",
        "    print(\"\\n\\n--- 3. Distribution of Categorical Columns ---\")\n",
        "    categorical_cols = df.select_dtypes(include=['object']).columns\n",
        "    for col in categorical_cols:\n",
        "        print(f\"\\n--- Column: {col} ---\")\n",
        "        print(df[col].value_counts())\n",
        "\n",
        "else:\n",
        "    print(\"❌ Error: DataFrame 'df' not found. Please run the data loading step first.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "collapsed": true,
        "id": "V78vcom80rwH",
        "outputId": "95ae8086-83fb-4e38-b881-7af9fa7dfb42"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- 1. Checking for Missing Values ---\n",
            "State                            0\n",
            "Item                             0\n",
            "Year                             0\n",
            "sowing_date                      0\n",
            "area_hectares                    0\n",
            "irrigation_type                  0\n",
            "pH                               0\n",
            "N_kg_ha                          0\n",
            "P_kg_ha                          0\n",
            "K_kg_ha                          0\n",
            "organic_carbon_%                 0\n",
            "moisture_%                       0\n",
            "ndvi                             0\n",
            "evi                              0\n",
            "average_rain_fall_mm_per_year    0\n",
            "pesticides_tonnes                0\n",
            "avg_temp                         0\n",
            "historical_yield_hg_ha           0\n",
            "dtype: int64\n",
            "\n",
            "\n",
            "--- 2. Statistical Summary of Numerical Columns ---\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "             Year  area_hectares         pH     N_kg_ha    P_kg_ha   K_kg_ha  \\\n",
              "count    50.00000      50.000000  50.000000   50.000000  50.000000  50.00000   \n",
              "mean   2014.78000       5.580000   6.408000  115.860000  68.280000  54.86000   \n",
              "std       3.08578       2.458554   0.603676   20.781674  13.907919  13.56317   \n",
              "min    2010.00000       2.000000   5.600000   80.000000  41.000000  34.00000   \n",
              "25%    2012.00000       3.250000   5.900000   98.750000  60.500000  43.00000   \n",
              "50%    2015.00000       5.000000   6.350000  112.500000  69.000000  52.00000   \n",
              "75%    2017.00000       7.750000   6.900000  130.750000  76.000000  67.25000   \n",
              "max    2019.00000      10.000000   7.500000  148.000000  90.000000  78.00000   \n",
              "\n",
              "       organic_carbon_%  moisture_%       ndvi        evi  \\\n",
              "count         50.000000   50.000000  50.000000  50.000000   \n",
              "mean           0.809800   28.540000   0.528400   0.420600   \n",
              "std            0.214348    8.998843   0.139757   0.121578   \n",
              "min            0.430000   15.400000   0.300000   0.200000   \n",
              "25%            0.610000   20.550000   0.412500   0.335000   \n",
              "50%            0.785000   27.050000   0.540000   0.425000   \n",
              "75%            0.997500   35.875000   0.647500   0.517500   \n",
              "max            1.180000   44.900000   0.770000   0.600000   \n",
              "\n",
              "       average_rain_fall_mm_per_year  pesticides_tonnes   avg_temp  \\\n",
              "count                      50.000000          50.000000  50.000000   \n",
              "mean                     1130.628000          13.542000  28.448000   \n",
              "std                       188.737642           4.091958   3.679687   \n",
              "min                       823.100000           5.300000  22.100000   \n",
              "25%                       974.025000           9.825000  25.650000   \n",
              "50%                      1100.550000          13.250000  28.200000   \n",
              "75%                      1286.500000          17.400000  31.075000   \n",
              "max                      1498.400000          19.900000  34.900000   \n",
              "\n",
              "       historical_yield_hg_ha  \n",
              "count               50.000000  \n",
              "mean              3524.606400  \n",
              "std                834.853994  \n",
              "min               2001.560000  \n",
              "25%               2818.342500  \n",
              "50%               3651.625000  \n",
              "75%               4086.000000  \n",
              "max               4915.140000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f7a242c7-d282-47ee-88b2-2e6310815556\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>area_hectares</th>\n",
              "      <th>pH</th>\n",
              "      <th>N_kg_ha</th>\n",
              "      <th>P_kg_ha</th>\n",
              "      <th>K_kg_ha</th>\n",
              "      <th>organic_carbon_%</th>\n",
              "      <th>moisture_%</th>\n",
              "      <th>ndvi</th>\n",
              "      <th>evi</th>\n",
              "      <th>average_rain_fall_mm_per_year</th>\n",
              "      <th>pesticides_tonnes</th>\n",
              "      <th>avg_temp</th>\n",
              "      <th>historical_yield_hg_ha</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>50.00000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>50.00000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>50.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>2014.78000</td>\n",
              "      <td>5.580000</td>\n",
              "      <td>6.408000</td>\n",
              "      <td>115.860000</td>\n",
              "      <td>68.280000</td>\n",
              "      <td>54.86000</td>\n",
              "      <td>0.809800</td>\n",
              "      <td>28.540000</td>\n",
              "      <td>0.528400</td>\n",
              "      <td>0.420600</td>\n",
              "      <td>1130.628000</td>\n",
              "      <td>13.542000</td>\n",
              "      <td>28.448000</td>\n",
              "      <td>3524.606400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>3.08578</td>\n",
              "      <td>2.458554</td>\n",
              "      <td>0.603676</td>\n",
              "      <td>20.781674</td>\n",
              "      <td>13.907919</td>\n",
              "      <td>13.56317</td>\n",
              "      <td>0.214348</td>\n",
              "      <td>8.998843</td>\n",
              "      <td>0.139757</td>\n",
              "      <td>0.121578</td>\n",
              "      <td>188.737642</td>\n",
              "      <td>4.091958</td>\n",
              "      <td>3.679687</td>\n",
              "      <td>834.853994</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>2010.00000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>5.600000</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>41.000000</td>\n",
              "      <td>34.00000</td>\n",
              "      <td>0.430000</td>\n",
              "      <td>15.400000</td>\n",
              "      <td>0.300000</td>\n",
              "      <td>0.200000</td>\n",
              "      <td>823.100000</td>\n",
              "      <td>5.300000</td>\n",
              "      <td>22.100000</td>\n",
              "      <td>2001.560000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2012.00000</td>\n",
              "      <td>3.250000</td>\n",
              "      <td>5.900000</td>\n",
              "      <td>98.750000</td>\n",
              "      <td>60.500000</td>\n",
              "      <td>43.00000</td>\n",
              "      <td>0.610000</td>\n",
              "      <td>20.550000</td>\n",
              "      <td>0.412500</td>\n",
              "      <td>0.335000</td>\n",
              "      <td>974.025000</td>\n",
              "      <td>9.825000</td>\n",
              "      <td>25.650000</td>\n",
              "      <td>2818.342500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>2015.00000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>6.350000</td>\n",
              "      <td>112.500000</td>\n",
              "      <td>69.000000</td>\n",
              "      <td>52.00000</td>\n",
              "      <td>0.785000</td>\n",
              "      <td>27.050000</td>\n",
              "      <td>0.540000</td>\n",
              "      <td>0.425000</td>\n",
              "      <td>1100.550000</td>\n",
              "      <td>13.250000</td>\n",
              "      <td>28.200000</td>\n",
              "      <td>3651.625000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>2017.00000</td>\n",
              "      <td>7.750000</td>\n",
              "      <td>6.900000</td>\n",
              "      <td>130.750000</td>\n",
              "      <td>76.000000</td>\n",
              "      <td>67.25000</td>\n",
              "      <td>0.997500</td>\n",
              "      <td>35.875000</td>\n",
              "      <td>0.647500</td>\n",
              "      <td>0.517500</td>\n",
              "      <td>1286.500000</td>\n",
              "      <td>17.400000</td>\n",
              "      <td>31.075000</td>\n",
              "      <td>4086.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>2019.00000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>7.500000</td>\n",
              "      <td>148.000000</td>\n",
              "      <td>90.000000</td>\n",
              "      <td>78.00000</td>\n",
              "      <td>1.180000</td>\n",
              "      <td>44.900000</td>\n",
              "      <td>0.770000</td>\n",
              "      <td>0.600000</td>\n",
              "      <td>1498.400000</td>\n",
              "      <td>19.900000</td>\n",
              "      <td>34.900000</td>\n",
              "      <td>4915.140000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f7a242c7-d282-47ee-88b2-2e6310815556')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f7a242c7-d282-47ee-88b2-2e6310815556 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f7a242c7-d282-47ee-88b2-2e6310815556');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-58371cef-ddc1-4c27-8cb6-058fa26755d4\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-58371cef-ddc1-4c27-8cb6-058fa26755d4')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-58371cef-ddc1-4c27-8cb6-058fa26755d4 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    print(\\\"\\u274c Error: DataFrame 'df' not found\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 920.3950419840188,\n        \"min\": 3.08578042257166,\n        \"max\": 2019.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2014.78,\n          2015.0,\n          50.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"area_hectares\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.086714945375114,\n        \"min\": 2.0,\n        \"max\": 50.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5.58,\n          5.0,\n          50.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.837674533140001,\n        \"min\": 0.60367581514909,\n        \"max\": 50.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6.4079999999999995,\n          6.35,\n          50.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"N_kg_ha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 42.4255057609842,\n        \"min\": 20.78167363769515,\n        \"max\": 148.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          115.86,\n          112.5,\n          50.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"P_kg_ha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23.52898806572475,\n        \"min\": 13.907918754494963,\n        \"max\": 90.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          68.28,\n          69.0,\n          50.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"K_kg_ha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 19.766907214887716,\n        \"min\": 13.563170419807262,\n        \"max\": 78.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          54.86,\n          52.0,\n          50.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"organic_carbon_%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17.426461242506395,\n        \"min\": 0.2143475148977873,\n        \"max\": 50.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.8098000000000001,\n          0.785,\n          50.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"moisture_%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.149405017598205,\n        \"min\": 8.998843463105098,\n        \"max\": 50.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          28.54,\n          27.05,\n          50.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ndvi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17.51017163225188,\n        \"min\": 0.13975722390149664,\n        \"max\": 50.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.5284,\n          0.54,\n          50.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"evi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17.546055823724483,\n        \"min\": 0.12157822710552431,\n        \"max\": 50.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.4206,\n          0.425,\n          50.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"average_rain_fall_mm_per_year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 512.4063179201555,\n        \"min\": 50.0,\n        \"max\": 1498.4,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1130.628,\n          1100.5500000000002,\n          50.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pesticides_tonnes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.52914917256292,\n        \"min\": 4.0919577670531915,\n        \"max\": 50.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          13.541999999999998,\n          13.25,\n          50.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_temp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.945578926737875,\n        \"min\": 3.6796872094219726,\n        \"max\": 50.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          28.447999999999997,\n          28.200000000000003,\n          50.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"historical_yield_hg_ha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1665.0418510857153,\n        \"min\": 50.0,\n        \"max\": 4915.14,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3524.6064,\n          3651.625,\n          50.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n",
            "--- 3. Distribution of Categorical Columns ---\n",
            "\n",
            "--- Column: State ---\n",
            "State\n",
            "Odisha    50\n",
            "Name: count, dtype: int64\n",
            "\n",
            "--- Column: Item ---\n",
            "Item\n",
            "Groundnut    20\n",
            "Rice         15\n",
            "Maize        15\n",
            "Name: count, dtype: int64\n",
            "\n",
            "--- Column: sowing_date ---\n",
            "sowing_date\n",
            "01-06-2011    2\n",
            "03-06-2019    1\n",
            "21-06-2018    1\n",
            "05-06-2014    1\n",
            "23-06-2019    1\n",
            "05-06-2013    1\n",
            "10-06-2016    1\n",
            "10-06-2017    1\n",
            "21-06-2011    1\n",
            "19-06-2012    1\n",
            "17-06-2010    1\n",
            "14-06-2011    1\n",
            "21-06-2013    1\n",
            "09-06-2017    1\n",
            "14-06-2013    1\n",
            "19-06-2015    1\n",
            "13-06-2015    1\n",
            "13-06-2019    1\n",
            "04-06-2013    1\n",
            "30-06-2015    1\n",
            "17-06-2019    1\n",
            "08-06-2011    1\n",
            "02-06-2019    1\n",
            "28-06-2013    1\n",
            "08-06-2017    1\n",
            "07-06-2016    1\n",
            "26-06-2018    1\n",
            "26-06-2017    1\n",
            "02-06-2014    1\n",
            "22-06-2011    1\n",
            "22-06-2014    1\n",
            "03-06-2017    1\n",
            "27-06-2019    1\n",
            "18-06-2018    1\n",
            "12-06-2018    1\n",
            "01-06-2010    1\n",
            "22-06-2018    1\n",
            "12-06-2016    1\n",
            "05-06-2018    1\n",
            "30-06-2017    1\n",
            "30-06-2010    1\n",
            "27-06-2017    1\n",
            "25-06-2017    1\n",
            "17-06-2012    1\n",
            "16-06-2010    1\n",
            "15-06-2017    1\n",
            "23-06-2012    1\n",
            "15-06-2012    1\n",
            "05-06-2010    1\n",
            "Name: count, dtype: int64\n",
            "\n",
            "--- Column: irrigation_type ---\n",
            "irrigation_type\n",
            "Canal       16\n",
            "Rainfed     15\n",
            "Borewell    10\n",
            "Drip         9\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "if 'df' in locals():\n",
        "    print(\"--- Visualizing Key Feature Relationships ---\")\n",
        "    sns.pairplot(df, x_vars=['ndvi', 'pH', 'moisture_%'], y_vars=['historical_yield_hg_ha'], height=4, aspect=1)\n",
        "    plt.suptitle('Yield vs. NDVI, pH, and Moisture', y=1.02)\n",
        "    plt.show()\n",
        "\n",
        "else:\n",
        "    print(\"❌ Error: DataFrame 'df' not found. Please run the data loading step first.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 353
        },
        "collapsed": true,
        "id": "UkpGfElV3BzZ",
        "outputId": "062f44e3-a4fa-4d85-88b1-addb08f143a6"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Visualizing Key Feature Relationships ---\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x400 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "if 'df' in locals():\n",
        "    Y = df['historical_yield_hg_ha']\n",
        "    X = df.drop(columns=['historical_yield_hg_ha', 'State', 'sowing_date'])\n",
        "    print(\"✅ Target variable (Y) and features (X) have been assigned.\")\n",
        "    print(\"\\n--- Features (X) ---\")\n",
        "    print(\"These are the inputs the model will use:\")\n",
        "    display(X.head())\n",
        "    print(\"\\n--- Target (Y) ---\")\n",
        "    print(\"This is the value the model will learn to predict:\")\n",
        "    display(Y.head())\n",
        "else:\n",
        "    print(\"❌ Error: DataFrame 'df' not found. Please run the data loading step first.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 572
        },
        "id": "E2X8TgcA3Ufw",
        "outputId": "24d35c52-8992-45bc-bab2-45ba59d0dbb7"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Target variable (Y) and features (X) have been assigned.\n",
            "\n",
            "--- Features (X) ---\n",
            "These are the inputs the model will use:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "        Item  Year  area_hectares irrigation_type   pH  N_kg_ha  P_kg_ha  \\\n",
              "0  Groundnut  2019              6           Canal  5.9      148       70   \n",
              "1       Rice  2018              3            Drip  5.6      101       85   \n",
              "2  Groundnut  2019              4           Canal  6.3      146       41   \n",
              "3  Groundnut  2014              8         Rainfed  5.6      105       90   \n",
              "4       Rice  2011              7           Canal  7.3       95       89   \n",
              "\n",
              "   K_kg_ha  organic_carbon_%  moisture_%  ndvi   evi  \\\n",
              "0       70              1.09        44.9  0.57  0.60   \n",
              "1       59              1.07        35.9  0.66  0.56   \n",
              "2       46              0.74        26.5  0.33  0.43   \n",
              "3       78              0.58        37.1  0.37  0.57   \n",
              "4       49              0.72        42.5  0.37  0.20   \n",
              "\n",
              "   average_rain_fall_mm_per_year  pesticides_tonnes  avg_temp  \n",
              "0                         1046.8               11.0      34.7  \n",
              "1                         1013.3               12.8      28.3  \n",
              "2                          915.3               17.6      33.8  \n",
              "3                         1173.9               15.1      27.6  \n",
              "4                         1139.4               16.0      26.6  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-728d022b-10be-4221-b4c1-54b9b4b53ea8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Item</th>\n",
              "      <th>Year</th>\n",
              "      <th>area_hectares</th>\n",
              "      <th>irrigation_type</th>\n",
              "      <th>pH</th>\n",
              "      <th>N_kg_ha</th>\n",
              "      <th>P_kg_ha</th>\n",
              "      <th>K_kg_ha</th>\n",
              "      <th>organic_carbon_%</th>\n",
              "      <th>moisture_%</th>\n",
              "      <th>ndvi</th>\n",
              "      <th>evi</th>\n",
              "      <th>average_rain_fall_mm_per_year</th>\n",
              "      <th>pesticides_tonnes</th>\n",
              "      <th>avg_temp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Groundnut</td>\n",
              "      <td>2019</td>\n",
              "      <td>6</td>\n",
              "      <td>Canal</td>\n",
              "      <td>5.9</td>\n",
              "      <td>148</td>\n",
              "      <td>70</td>\n",
              "      <td>70</td>\n",
              "      <td>1.09</td>\n",
              "      <td>44.9</td>\n",
              "      <td>0.57</td>\n",
              "      <td>0.60</td>\n",
              "      <td>1046.8</td>\n",
              "      <td>11.0</td>\n",
              "      <td>34.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Rice</td>\n",
              "      <td>2018</td>\n",
              "      <td>3</td>\n",
              "      <td>Drip</td>\n",
              "      <td>5.6</td>\n",
              "      <td>101</td>\n",
              "      <td>85</td>\n",
              "      <td>59</td>\n",
              "      <td>1.07</td>\n",
              "      <td>35.9</td>\n",
              "      <td>0.66</td>\n",
              "      <td>0.56</td>\n",
              "      <td>1013.3</td>\n",
              "      <td>12.8</td>\n",
              "      <td>28.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Groundnut</td>\n",
              "      <td>2019</td>\n",
              "      <td>4</td>\n",
              "      <td>Canal</td>\n",
              "      <td>6.3</td>\n",
              "      <td>146</td>\n",
              "      <td>41</td>\n",
              "      <td>46</td>\n",
              "      <td>0.74</td>\n",
              "      <td>26.5</td>\n",
              "      <td>0.33</td>\n",
              "      <td>0.43</td>\n",
              "      <td>915.3</td>\n",
              "      <td>17.6</td>\n",
              "      <td>33.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Groundnut</td>\n",
              "      <td>2014</td>\n",
              "      <td>8</td>\n",
              "      <td>Rainfed</td>\n",
              "      <td>5.6</td>\n",
              "      <td>105</td>\n",
              "      <td>90</td>\n",
              "      <td>78</td>\n",
              "      <td>0.58</td>\n",
              "      <td>37.1</td>\n",
              "      <td>0.37</td>\n",
              "      <td>0.57</td>\n",
              "      <td>1173.9</td>\n",
              "      <td>15.1</td>\n",
              "      <td>27.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Rice</td>\n",
              "      <td>2011</td>\n",
              "      <td>7</td>\n",
              "      <td>Canal</td>\n",
              "      <td>7.3</td>\n",
              "      <td>95</td>\n",
              "      <td>89</td>\n",
              "      <td>49</td>\n",
              "      <td>0.72</td>\n",
              "      <td>42.5</td>\n",
              "      <td>0.37</td>\n",
              "      <td>0.20</td>\n",
              "      <td>1139.4</td>\n",
              "      <td>16.0</td>\n",
              "      <td>26.6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-728d022b-10be-4221-b4c1-54b9b4b53ea8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-728d022b-10be-4221-b4c1-54b9b4b53ea8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-728d022b-10be-4221-b4c1-54b9b4b53ea8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-746caa60-f8ea-4a1b-ad61-460276037e0f\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-746caa60-f8ea-4a1b-ad61-460276037e0f')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-746caa60-f8ea-4a1b-ad61-460276037e0f button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    print(\\\"\\u274c Error: DataFrame 'df' not found\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Item\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Rice\",\n          \"Groundnut\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 2011,\n        \"max\": 2019,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2018,\n          2011\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"area_hectares\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 3,\n        \"max\": 8,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"irrigation_type\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Canal\",\n          \"Drip\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7092249290598859,\n        \"min\": 5.6,\n        \"max\": 7.3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          5.6,\n          7.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"N_kg_ha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25,\n        \"min\": 95,\n        \"max\": 148,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          101,\n          95\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"P_kg_ha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20,\n        \"min\": 41,\n        \"max\": 90,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          85,\n          89\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"K_kg_ha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 46,\n        \"max\": 78,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          59,\n          49\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"organic_carbon_%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.22770595073471406,\n        \"min\": 0.58,\n        \"max\": 1.09,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.07,\n          0.72\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"moisture_%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.131058827411256,\n        \"min\": 26.5,\n        \"max\": 44.9,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          35.9,\n          42.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ndvi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.14594519519326424,\n        \"min\": 0.33,\n        \"max\": 0.66,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.66,\n          0.37\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"evi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.16543881044059763,\n        \"min\": 0.2,\n        \"max\": 0.6,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.56,\n          0.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"average_rain_fall_mm_per_year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 103.13250215135874,\n        \"min\": 915.3,\n        \"max\": 1173.9,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1013.3,\n          1139.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pesticides_tonnes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.6153393661244047,\n        \"min\": 11.0,\n        \"max\": 17.6,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          12.8,\n          16.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_temp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.7596542394214922,\n        \"min\": 26.6,\n        \"max\": 34.7,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          28.3,\n          26.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Target (Y) ---\n",
            "This is the value the model will learn to predict:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "0    3817.88\n",
              "1    4778.90\n",
              "2    3953.23\n",
              "3    4744.88\n",
              "4    4550.12\n",
              "Name: historical_yield_hg_ha, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>historical_yield_hg_ha</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3817.88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4778.90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3953.23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4744.88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4550.12</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "if 'X' in locals() and 'Y' in locals():\n",
        "    x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)\n",
        "    print(\"✅ Data has been successfully split into training and testing sets.\")\n",
        "    print(\"\\n--- Shape of the Sets ---\")\n",
        "    print(f\"Training Features (x_train): {x_train.shape}\")\n",
        "    print(f\"Testing Features (x_test):  {x_test.shape}\")\n",
        "    print(f\"Training Target (y_train):  {y_train.shape}\")\n",
        "    print(f\"Testing Target (y_test):   {y_test.shape}\")\n",
        "else:\n",
        "    print(\"❌ Error: Features (X) and Target (Y) not found. Please run the previous step first.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oMKkcENB3smB",
        "outputId": "92643f34-1494-47dd-854b-f0b58c796f7b"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Data has been successfully split into training and testing sets.\n",
            "\n",
            "--- Shape of the Sets ---\n",
            "Training Features (x_train): (40, 15)\n",
            "Testing Features (x_test):  (10, 15)\n",
            "Training Target (y_train):  (40,)\n",
            "Testing Target (y_test):   (10,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "if 'x_train' in locals():\n",
        "    numerical_features = x_train.select_dtypes(include=['number']).columns\n",
        "    categorical_features = x_train.select_dtypes(include=['object']).columns\n",
        "    print(\"--- Identified Feature Types ---\")\n",
        "    print(\"Numerical features to be scaled:\", list(numerical_features))\n",
        "    print(\"Categorical features to be encoded:\", list(categorical_features))\n",
        "    preprocessor = ColumnTransformer(\n",
        "        transformers=[\n",
        "            ('num', StandardScaler(), numerical_features),\n",
        "            ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)\n",
        "        ])\n",
        "    x_train_processed = preprocessor.fit_transform(x_train)\n",
        "    x_test_processed = preprocessor.transform(x_test)\n",
        "\n",
        "    print(\"\\n✅ Preprocessing complete.\")\n",
        "    print(f\"Original training data shape: {x_train.shape}\")\n",
        "    print(f\"Processed training data shape: {x_train_processed.shape}\")\n",
        "    print(f\"Processed testing data shape:  {x_test_processed.shape}\")\n",
        "\n",
        "else:\n",
        "    print(\"❌ Error: Training and testing sets not found. Please run the 'Train-Test Split' step first.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0hTGv_J838dM",
        "outputId": "fde13de8-ed02-481c-e2df-a78fa32c3713"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Identified Feature Types ---\n",
            "Numerical features to be scaled: ['Year', 'area_hectares', 'pH', 'N_kg_ha', 'P_kg_ha', 'K_kg_ha', 'organic_carbon_%', 'moisture_%', 'ndvi', 'evi', 'average_rain_fall_mm_per_year', 'pesticides_tonnes', 'avg_temp']\n",
            "Categorical features to be encoded: ['Item', 'irrigation_type']\n",
            "\n",
            "✅ Preprocessing complete.\n",
            "Original training data shape: (40, 15)\n",
            "Processed training data shape: (40, 20)\n",
            "Processed testing data shape:  (10, 20)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import GradientBoostingRegressor\n",
        "from sklearn.neural_network import MLPRegressor\n",
        "from sklearn.metrics import r2_score, mean_absolute_error\n",
        "import time\n",
        "\n",
        "if 'x_train_processed' in locals():\n",
        "    models = {\n",
        "        \"Gradient Boosting\": GradientBoostingRegressor(n_estimators=100, random_state=42),\n",
        "        \"Neural Network\": MLPRegressor(hidden_layer_sizes=(100, 50), max_iter=1000, random_state=42, early_stopping=True)\n",
        "    }\n",
        "\n",
        "    print(\"--- Starting Model Training and Evaluation ---\")\n",
        "\n",
        "    best_model = None\n",
        "    best_score = -1\n",
        "\n",
        "    results = {}\n",
        "\n",
        "    for name, model in models.items():\n",
        "        start_time = time.time()\n",
        "\n",
        "        model.fit(x_train_processed, y_train)\n",
        "\n",
        "        y_pred = model.predict(x_test_processed)\n",
        "\n",
        "        score = r2_score(y_test, y_pred)\n",
        "        mae = mean_absolute_error(y_test, y_pred)\n",
        "\n",
        "        end_time = time.time()\n",
        "        training_time = end_time - start_time\n",
        "\n",
        "        results[name] = {'R2 Score': score, 'MAE': mae, 'Training Time (s)': training_time}\n",
        "\n",
        "        print(f\"\\nModel: {name}\")\n",
        "        print(f\"R-squared Score: {score:.4f}\")\n",
        "        print(f\"Mean Absolute Error: {mae:.2f}\")\n",
        "        print(f\"Training Time: {training_time:.2f} seconds\")\n",
        "\n",
        "        if score > best_score:\n",
        "            best_score = score\n",
        "            best_model = model\n",
        "\n",
        "    print(\"\\n--- Model Selection ---\")\n",
        "    best_model_name = max(results, key=lambda name: results[name]['R2 Score'])\n",
        "    print(f\"✅ Best performing model selected: {best_model_name} with an R-squared score of {results[best_model_name]['R2 Score']:.4f}\")\n",
        "\n",
        "else:\n",
        "    print(\"❌ Error: Processed data not found. Please run the 'Preprocessing' step first.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bu4_BZlQ4CCg",
        "outputId": "04b5d815-b025-44c8-c2a0-ec04dcb35685"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Starting Model Training and Evaluation ---\n",
            "\n",
            "Model: Gradient Boosting\n",
            "R-squared Score: -1.4025\n",
            "Mean Absolute Error: 928.86\n",
            "Training Time: 0.09 seconds\n",
            "\n",
            "Model: Neural Network\n",
            "R-squared Score: -0.8296\n",
            "Mean Absolute Error: 699.25\n",
            "Training Time: 0.75 seconds\n",
            "\n",
            "--- Model Selection ---\n",
            "✅ Best performing model selected: Neural Network with an R-squared score of -0.8296\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "if 'best_model' in locals():\n",
        "\n",
        "    y_pred = best_model.predict(x_test_processed)\n",
        "\n",
        "\n",
        "    plt.figure(figsize=(10, 8))\n",
        "    sns.scatterplot(x=y_test, y=y_pred)\n",
        "\n",
        "\n",
        "    plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], '--r', linewidth=2)\n",
        "\n",
        "\n",
        "    plt.xlabel('Actual Yield (hg/ha)')\n",
        "    plt.ylabel('Predicted Yield (hg/ha)')\n",
        "    plt.title(f'Actual vs. Predicted Yield - {best_model.__class__.__name__}')\n",
        "    plt.show()\n",
        "\n",
        "else:\n",
        "    print(\"❌ Error: A trained model was not found. Please run the 'Model Selection & Training' step first.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 718
        },
        "id": "w26A4zS24ofR",
        "outputId": "0819cf5d-f471-43bb-d3de-f47275cb3854"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.pipeline import Pipeline\n",
        "import pickle\n",
        "\n",
        "if 'preprocessor' in locals() and 'best_model' in locals():\n",
        "\n",
        "    final_pipeline = Pipeline(steps=[\n",
        "        ('preprocessor', preprocessor),\n",
        "        ('regressor', best_model)\n",
        "    ])\n",
        "\n",
        "\n",
        "    with open('crop_yield_pipeline.pkl', 'wb') as f:\n",
        "        pickle.dump(final_pipeline, f)\n",
        "\n",
        "    print(\"✅ Final model pipeline created and saved as 'crop_yield_pipeline.pkl'\")\n",
        "\n",
        "else:\n",
        "    print(\"❌ Error: Required components not found. Please run the previous steps.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x07fXfuy42W7",
        "outputId": "b24d0d6e-6d3f-4409-be6b-260fb034a500"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Final model pipeline created and saved as 'crop_yield_pipeline.pkl'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pickle\n",
        "from sklearn.pipeline import Pipeline\n",
        "\n",
        "if 'preprocessor' in locals() and 'best_model' in locals():\n",
        "    final_pipeline = Pipeline(steps=[\n",
        "        ('preprocessor', preprocessor),\n",
        "        ('regressor', best_model)\n",
        "    ])\n",
        "\n",
        "    file_path = 'final_crop_yield_pipeline.pkl'\n",
        "    with open(file_path, 'wb') as f:\n",
        "        pickle.dump(final_pipeline, f)\n",
        "\n",
        "    print(f\"✅ Model pipeline saved successfully!\")\n",
        "    print(f\"File created: '{file_path}'\")\n",
        "    print(\"\\nThis single file now contains both the data preprocessor and the trained model.\")\n",
        "    print(\"You can now use this file in your application to make predictions on new data.\")\n",
        "\n",
        "else:\n",
        "    print(\"❌ Error: Required components ('preprocessor' or 'best_model') not found. Please run the previous steps first.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GyH21eJY5Cqa",
        "outputId": "3df1e95b-8b05-484b-b6b6-5dc3eeb16231"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Model pipeline saved successfully!\n",
            "File created: 'final_crop_yield_pipeline.pkl'\n",
            "\n",
            "This single file now contains both the data preprocessor and the trained model.\n",
            "You can now use this file in your application to make predictions on new data.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import pickle\n",
        "import os\n",
        "\n",
        "# --- This is the prediction function from the previous step ---\n",
        "def predict_yield(new_data, pipeline_path='final_crop_yield_pipeline.pkl'):\n",
        "    \"\"\"\n",
        "    Loads the saved pipeline and predicts the yield for new input data.\n",
        "    \"\"\"\n",
        "    if not os.path.exists(pipeline_path):\n",
        "        return f\"Error: Model file not found at '{pipeline_path}'. Please ensure the file is in the correct directory.\"\n",
        "\n",
        "    with open(pipeline_path, 'rb') as f:\n",
        "        pipeline = pickle.load(f)\n",
        "\n",
        "    input_df = pd.DataFrame([new_data])\n",
        "    prediction = pipeline.predict(input_df)\n",
        "    return prediction[0]\n",
        "\n",
        "# --- This function handles getting and validating user input ---\n",
        "def get_user_input():\n",
        "    \"\"\"\n",
        "    Prompts the user for all required features and validates the input.\n",
        "    \"\"\"\n",
        "    print(\"--- Please Enter the Current Farm Data ---\")\n",
        "\n",
        "    # Define the known categories from the training data to guide the user\n",
        "    known_items = ['Cassava', 'Groundnut', 'Maize', 'Potatoes', 'Rice', 'Sorghum', 'Soybeans', 'Sweet potatoes', 'Wheat']\n",
        "    known_irrigation = ['Rainfed', 'Canal', 'Borewell', 'Drip']\n",
        "\n",
        "    data = {}\n",
        "\n",
        "    # Use a helper function for validated numerical input\n",
        "    def get_validated_float(prompt, example):\n",
        "        while True:\n",
        "            try:\n",
        "                return float(input(f\"{prompt} (e.g., {example}): \"))\n",
        "            except ValueError:\n",
        "                print(\"Invalid input. Please enter a number.\")\n",
        "\n",
        "    def get_validated_category(prompt, options):\n",
        "        while True:\n",
        "            print(f\"{prompt} Available options: {options}\")\n",
        "            user_input = input(\"> \").strip().title() # Standardize input\n",
        "            if user_input in options:\n",
        "                return user_input\n",
        "            else:\n",
        "                print(f\"Invalid option. Please choose from the provided list.\")\n",
        "\n",
        "    # Collect inputs from the user\n",
        "    data['Item'] = get_validated_category(\"Enter the crop type.\", known_items)\n",
        "    data['Year'] = 2025 # Assuming prediction for a future year\n",
        "    data['area_hectares'] = get_validated_float(\"Enter farm area in hectares\", 5)\n",
        "    data['irrigation_type'] = get_validated_category(\"Enter the irrigation type.\", known_irrigation)\n",
        "    data['pH'] = get_validated_float(\"Enter soil pH\", 6.8)\n",
        "    data['N_kg_ha'] = get_validated_float(\"Enter Nitrogen content (N_kg_ha)\", 120)\n",
        "    data['P_kg_ha'] = get_validated_float(\"Enter Phosphorus content (P_kg_ha)\", 60)\n",
        "    data['K_kg_ha'] = get_validated_float(\"Enter Potassium content (K_kg_ha)\", 50)\n",
        "    data['organic_carbon_%'] = get_validated_float(\"Enter organic carbon percentage\", 0.75)\n",
        "    data['moisture_%'] = get_validated_float(\"Enter soil moisture percentage\", 40.2)\n",
        "    data['ndvi'] = get_validated_float(\"Enter current NDVI value\", 0.72)\n",
        "    data['evi'] = get_validated_float(\"Enter current EVI value\", 0.51)\n",
        "    data['average_rain_fall_mm_per_year'] = get_validated_float(\"Enter average annual rainfall (mm)\", 1450)\n",
        "    data['pesticides_tonnes'] = get_validated_float(\"Enter pesticides used (tonnes)\", 1100)\n",
        "    data['avg_temp'] = get_validated_float(\"Enter average temperature (°C)\", 29.5)\n",
        "\n",
        "    return data\n",
        "\n",
        "\n",
        "if __name__ == '__main__':\n",
        "\n",
        "    farmer_input = get_user_input()\n",
        "\n",
        "\n",
        "    predicted_yield = predict_yield(farmer_input)\n",
        "\n",
        "\n",
        "    print(\"\\n-------------------------------------\")\n",
        "    print(\"--- 🌾 Crop Yield Forecast 🌾 ---\")\n",
        "    if isinstance(predicted_yield, float):\n",
        "        print(f\"Estimated Yield: {predicted_yield:.2f} hg/ha\")\n",
        "    else:\n",
        "\n",
        "        print(predicted_yield)\n",
        "    print(\"-------------------------------------\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9-oN7WGm5dga",
        "outputId": "47c4b266-c522-401d-cdae-9cbec15bf458"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Please Enter the Current Farm Data ---\n",
            "Enter the crop type. Available options: ['Cassava', 'Groundnut', 'Maize', 'Potatoes', 'Rice', 'Sorghum', 'Soybeans', 'Sweet potatoes', 'Wheat']\n",
            "> Maize\n",
            "Enter farm area in hectares (e.g., 5): 5\n",
            "Enter the irrigation type. Available options: ['Rainfed', 'Canal', 'Borewell', 'Drip']\n",
            "> canal\n",
            "Enter soil pH (e.g., 6.8): 6.8\n",
            "Enter Nitrogen content (N_kg_ha) (e.g., 120): 120\n",
            "Enter Phosphorus content (P_kg_ha) (e.g., 60): 60\n",
            "Enter Potassium content (K_kg_ha) (e.g., 50): 50\n",
            "Enter organic carbon percentage (e.g., 0.75): 0.75\n",
            "Enter soil moisture percentage (e.g., 40.2): 40\n",
            "Enter current NDVI value (e.g., 0.72): 72\n",
            "Enter current EVI value (e.g., 0.51): 0.50\n",
            "Enter average annual rainfall (mm) (e.g., 1450): 1400\n",
            "Enter pesticides used (tonnes) (e.g., 1100): 1100\n",
            "Enter average temperature (°C) (e.g., 29.5): 30\n",
            "\n",
            "-------------------------------------\n",
            "--- 🌾 Crop Yield Forecast 🌾 ---\n",
            "Estimated Yield: 135447.97 hg/ha\n",
            "-------------------------------------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import pickle\n",
        "import os\n",
        "\n",
        "def get_historical_average(crop_item, data_path='odisha_agri_data.xlsx'):\n",
        "    if not os.path.exists(data_path):\n",
        "        return \"Historical data file not found.\"\n",
        "    df = pd.read_excel(data_path)\n",
        "    crop_data = df[df['Item'] == crop_item]\n",
        "    if crop_data.empty:\n",
        "        return \"No historical data found for this crop.\"\n",
        "    return crop_data['historical_yield_hg_ha'].mean()\n",
        "\n",
        "\n",
        "def predict_yield(new_data, pipeline_path='final_crop_yield_pipeline.pkl'):\n",
        "    if not os.path.exists(pipeline_path):\n",
        "        return f\"Error: Model file not found at '{pipeline_path}'.\"\n",
        "    with open(pipeline_path, 'rb') as f:\n",
        "        pipeline = pickle.load(f)\n",
        "    input_df = pd.DataFrame([new_data])\n",
        "    prediction = pipeline.predict(input_df)\n",
        "    return prediction[0]\n",
        "\n",
        "\n",
        "def generate_recommendations(input_data, predicted_yield, historical_avg):\n",
        "    \"\"\"\n",
        "    Analyzes input data and model predictions to provide actionable insights.\n",
        "    \"\"\"\n",
        "    insights = []\n",
        "    item = input_data['Item']\n",
        "\n",
        "\n",
        "    if isinstance(predicted_yield, float) and isinstance(historical_avg, float):\n",
        "        percent_change = ((predicted_yield - historical_avg) / historical_avg) * 100\n",
        "        if percent_change > 5:\n",
        "            insights.append(f\"✅ Yield Forecast: The predicted yield is {percent_change:.2f}% above the historical average for {item}. Current conditions appear optimal.\")\n",
        "        elif percent_change < -5:\n",
        "            insights.append(f\"⚠️ Yield Alert: The predicted yield is {abs(percent_change):.2f}% below the historical average. Review the suggestions below to identify potential areas for improvement.\")\n",
        "        else:\n",
        "            insights.append(\"↔️ Yield Outlook: The predicted yield is on par with the historical average.\")\n",
        "\n",
        "\n",
        "    if input_data['pH'] < 6.0:\n",
        "        insights.append(f\"Soil Acidity: The soil pH of {input_data['pH']} is acidic. For many crops, including {item}, this can limit nutrient availability. Consider applying lime to raise the pH.\")\n",
        "    elif input_data['pH'] > 7.5:\n",
        "        insights.append(f\"Soil Alkalinity: The soil pH of {input_data['pH']} is alkaline. This can also affect nutrient uptake. Consider using soil acidifiers like sulfur.\")\n",
        "\n",
        "\n",
        "    n = input_data['N_kg_ha']\n",
        "    p = input_data['P_kg_ha']\n",
        "    k = input_data['K_kg_ha']\n",
        "    if n > p * 2.5 or n < p * 1.5:\n",
        "         insights.append(\"Nutrient Balance: The Nitrogen-to-Phosphorus ratio seems unbalanced. Ensure your fertilizer plan matches the specific needs of {item} for its current growth stage.\")\n",
        "\n",
        "\n",
        "    if input_data['organic_carbon_%'] < 0.5:\n",
        "        insights.append(\"Organic Carbon: The organic carbon level ({input_data['organic_carbon_%']}%) is low. Low organic carbon can affect soil structure and water retention. Consider adding compost or manure.\")\n",
        "\n",
        "\n",
        "    if input_data['ndvi'] < 0.5:\n",
        "        insights.append(f\"Vegetation Index: The NDVI value of {input_data['ndvi']} is on the lower side, which may indicate stress, nutrient deficiency, or pest issues in the crop canopy.\")\n",
        "    elif input_data['ndvi'] > 0.75:\n",
        "        insights.append(f\"Vegetation Index: The NDVI value of {input_data['ndvi']} is very high, indicating a healthy and dense crop canopy.\")\n",
        "\n",
        "    return insights\n",
        "\n",
        "\n",
        "def get_user_input():\n",
        "\n",
        "    print(\"--- Please Enter the Current Farm Data ---\")\n",
        "    known_items = ['Cassava', 'Groundnut', 'Maize', 'Potatoes', 'Rice', 'Sorghum', 'Soybeans', 'Sweet potatoes', 'Wheat']\n",
        "    known_irrigation = ['Rainfed', 'Canal', 'Borewell', 'Drip']\n",
        "    data = {}\n",
        "    def get_validated_float(prompt, example):\n",
        "        while True:\n",
        "            try: return float(input(f\"{prompt} (e.g., {example}): \"))\n",
        "            except ValueError: print(\"Invalid input. Please enter a number.\")\n",
        "    def get_validated_category(prompt, options):\n",
        "        while True:\n",
        "            print(f\"{prompt} Available options: {options}\")\n",
        "            user_input = input(\"> \").strip().title()\n",
        "            if user_input in options: return user_input\n",
        "            else: print(\"Invalid option. Please choose from the provided list.\")\n",
        "    data['Item'] = get_validated_category(\"Enter the crop type.\", known_items)\n",
        "    data['Year'] = 2025\n",
        "    data['area_hectares'] = get_validated_float(\"Enter farm area in hectares\", 5)\n",
        "    data['irrigation_type'] = get_validated_category(\"Enter the irrigation type.\", known_irrigation)\n",
        "    data['pH'] = get_validated_float(\"Enter soil pH\", 6.8)\n",
        "    data['N_kg_ha'] = get_validated_float(\"Enter Nitrogen content (N_kg_ha)\", 120)\n",
        "    data['P_kg_ha'] = get_validated_float(\"Enter Phosphorus content (P_kg_ha)\", 60)\n",
        "    data['K_kg_ha'] = get_validated_float(\"Enter Potassium content (K_kg_ha)\", 50)\n",
        "    data['organic_carbon_%'] = get_validated_float(\"Enter organic carbon percentage\", 0.75)\n",
        "    data['moisture_%'] = get_validated_float(\"Enter soil moisture percentage\", 40.2)\n",
        "    data['ndvi'] = get_validated_float(\"Enter current NDVI value\", 0.72)\n",
        "    data['evi'] = get_validated_float(\"Enter current EVI value\", 0.51)\n",
        "    data['average_rain_fall_mm_per_year'] = get_validated_float(\"Enter average annual rainfall (mm)\", 1450)\n",
        "    data['pesticides_tonnes'] = get_validated_float(\"Enter pesticides used (tonnes)\", 1100)\n",
        "    data['avg_temp'] = get_validated_float(\"Enter average temperature (°C)\", 29.5)\n",
        "    return data\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    farmer_input = get_user_input()\n",
        "    predicted_yield = predict_yield(farmer_input)\n",
        "    historical_avg = get_historical_average(farmer_input['Item'])\n",
        "\n",
        "    print(\"\\n-------------------------------------------\")\n",
        "    print(\"--- 🌾 Comprehensive Yield Analysis 🌾 ---\")\n",
        "\n",
        "    if isinstance(predicted_yield, float):\n",
        "        print(f\"📈 Predicted Yield: {predicted_yield:.2f} hg/ha\")\n",
        "        if isinstance(historical_avg, float):\n",
        "            print(f\"📊 Historical Avg. for {farmer_input['Item']}: {historical_avg:.2f} hg/ha\")\n",
        "\n",
        "\n",
        "        recommendations = generate_recommendations(farmer_input, predicted_yield, historical_avg)\n",
        "\n",
        "        if recommendations:\n",
        "            print(\"\\n--- Actionable Insights & Recommendations ---\")\n",
        "            for insight in recommendations:\n",
        "                print(f\"• {insight}\")\n",
        "    else:\n",
        "        print(f\"Prediction Error: {predicted_yield}\")\n",
        "    print(\"-------------------------------------------\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4bkY3uYQ5yuL",
        "outputId": "903a182a-6e89-4945-e1f2-90f7942b165c"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Please Enter the Current Farm Data ---\n",
            "Enter the crop type. Available options: ['Cassava', 'Groundnut', 'Maize', 'Potatoes', 'Rice', 'Sorghum', 'Soybeans', 'Sweet potatoes', 'Wheat']\n",
            "> maize\n",
            "Enter farm area in hectares (e.g., 5): 4\n",
            "Enter the irrigation type. Available options: ['Rainfed', 'Canal', 'Borewell', 'Drip']\n",
            "> drip\n",
            "Enter soil pH (e.g., 6.8): 3\n",
            "Enter Nitrogen content (N_kg_ha) (e.g., 120): 344\n",
            "Enter Phosphorus content (P_kg_ha) (e.g., 60): 32\n",
            "Enter Potassium content (K_kg_ha) (e.g., 50): 23\n",
            "Enter organic carbon percentage (e.g., 0.75): 1\n",
            "Enter soil moisture percentage (e.g., 40.2): 34\n",
            "Enter current NDVI value (e.g., 0.72): 1\n",
            "Enter current EVI value (e.g., 0.51): 1\n",
            "Enter average annual rainfall (mm) (e.g., 1450): 3232\n",
            "Enter pesticides used (tonnes) (e.g., 1100): 3333\n",
            "Enter average temperature (°C) (e.g., 29.5): 23\n",
            "\n",
            "-------------------------------------------\n",
            "--- 🌾 Comprehensive Yield Analysis 🌾 ---\n",
            "📈 Predicted Yield: 488482.67 hg/ha\n",
            "📊 Historical Avg. for Maize: 3550.97 hg/ha\n",
            "\n",
            "--- Actionable Insights & Recommendations ---\n",
            "• ✅ Yield Forecast: The predicted yield is 13656.30% above the historical average for Maize. Current conditions appear optimal.\n",
            "• Soil Acidity: The soil pH of 3.0 is acidic. For many crops, including Maize, this can limit nutrient availability. Consider applying lime to raise the pH.\n",
            "• Nutrient Balance: The Nitrogen-to-Phosphorus ratio seems unbalanced. Ensure your fertilizer plan matches the specific needs of {item} for its current growth stage.\n",
            "• Vegetation Index: The NDVI value of 1.0 is very high, indicating a healthy and dense crop canopy.\n",
            "-------------------------------------------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import pickle\n",
        "import os\n",
        "\n",
        "def get_historical_average(crop_item, data_path='odisha_agri_data.xlsx - Sheet1.csv'):\n",
        "    if not os.path.exists(data_path):\n",
        "        return \"Historical data file not found.\"\n",
        "    df = pd.read_csv(data_path)\n",
        "    crop_data = df[df['Item'] == crop_item]\n",
        "    if crop_data.empty:\n",
        "        return \"No historical data found for this crop.\"\n",
        "    return crop_data['historical_yield_hg_ha'].mean()\n",
        "\n",
        "\n",
        "def predict_yield(new_data, pipeline_path='final_crop_yield_pipeline.pkl'):\n",
        "    if not os.path.exists(pipeline_path):\n",
        "        return f\"Error: Model file not found at '{pipeline_path}'.\"\n",
        "    with open(pipeline_path, 'rb') as f:\n",
        "        pipeline = pickle.load(f)\n",
        "    input_df = pd.DataFrame([new_data])\n",
        "    prediction = pipeline.predict(input_df)\n",
        "    return prediction[0]\n",
        "\n",
        "\n",
        "def generate_recommendations(input_data, predicted_yield, historical_avg):\n",
        "    \"\"\"\n",
        "    Analyzes input data and model predictions to provide actionable insights.\n",
        "    \"\"\"\n",
        "    insights = []\n",
        "    item = input_data['Item']\n",
        "\n",
        "\n",
        "    if isinstance(predicted_yield, float) and isinstance(historical_avg, float):\n",
        "        percent_change = ((predicted_yield - historical_avg) / historical_avg) * 100\n",
        "        if percent_change > 5:\n",
        "            insights.append(f\"✅ Yield Forecast: The predicted yield is {percent_change:.2f}% above the historical average for {item}. Current conditions appear optimal.\")\n",
        "        elif percent_change < -5:\n",
        "            insights.append(f\"⚠️ Yield Alert: The predicted yield is {abs(percent_change):.2f}% below the historical average. Review the suggestions below to identify potential areas for improvement.\")\n",
        "        else:\n",
        "            insights.append(\"↔️ Yield Outlook: The predicted yield is on par with the historical average.\")\n",
        "\n",
        "\n",
        "    if input_data['pH'] < 6.0:\n",
        "        insights.append(f\"Soil Acidity: The soil pH of {input_data['pH']} is acidic. For many crops, including {item}, this can limit nutrient availability. Consider applying lime to raise the pH.\")\n",
        "    elif input_data['pH'] > 7.5:\n",
        "        insights.append(f\"Soil Alkalinity: The soil pH of {input_data['pH']} is alkaline. This can also affect nutrient uptake. Consider using soil acidifiers like sulfur.\")\n",
        "\n",
        "\n",
        "    n = input_data['N_kg_ha']\n",
        "    p = input_data['P_kg_ha']\n",
        "    k = input_data['K_kg_ha']\n",
        "    if n > p * 2.5 or n < p * 1.5:\n",
        "         insights.append(\"Nutrient Balance: The Nitrogen-to-Phosphorus ratio seems unbalanced. Ensure your fertilizer plan matches the specific needs of {item} for its current growth stage.\")\n",
        "\n",
        "\n",
        "    if input_data['organic_carbon_%'] < 0.5:\n",
        "        insights.append(\"Organic Carbon: The organic carbon level ({input_data['organic_carbon_%']}%) is low. Low organic carbon can affect soil structure and water retention. Consider adding compost or manure.\")\n",
        "\n",
        "\n",
        "    if input_data['ndvi'] < 0.5:\n",
        "        insights.append(f\"Vegetation Index: The NDVI value of {input_data['ndvi']} is on the lower side, which may indicate stress, nutrient deficiency, or pest issues in the crop canopy.\")\n",
        "    elif input_data['ndvi'] > 0.75:\n",
        "        insights.append(f\"Vegetation Index: The NDVI value of {input_data['ndvi']} is very high, indicating a healthy and dense crop canopy.\")\n",
        "\n",
        "    return insights\n",
        "\n",
        "\n",
        "def get_user_input():\n",
        "\n",
        "    print(\"--- Please Enter the Current Farm Data ---\")\n",
        "    known_items = ['Cassava', 'Groundnut', 'Maize', 'Potatoes', 'Rice', 'Sorghum', 'Soybeans', 'Sweet potatoes', 'Wheat']\n",
        "    known_irrigation = ['Rainfed', 'Canal', 'Borewell', 'Drip']\n",
        "    data = {}\n",
        "    def get_validated_float(prompt, example):\n",
        "        while True:\n",
        "            try: return float(input(f\"{prompt} (e.g., {example}): \"))\n",
        "            except ValueError: print(\"Invalid input. Please enter a number.\")\n",
        "    def get_validated_category(prompt, options):\n",
        "        while True:\n",
        "            print(f\"{prompt} Available options: {options}\")\n",
        "            user_input = input(\"> \").strip().title()\n",
        "            if user_input in options: return user_input\n",
        "            else: print(\"Invalid option. Please choose from the provided list.\")\n",
        "    data['Item'] = get_validated_category(\"Enter the crop type.\", known_items)\n",
        "    data['Year'] = 2025\n",
        "    data['area_hectares'] = get_validated_float(\"Enter farm area in hectares\", 5)\n",
        "    data['irrigation_type'] = get_validated_category(\"Enter the irrigation type.\", known_irrigation)\n",
        "    data['pH'] = get_validated_float(\"Enter soil pH\", 6.8)\n",
        "    data['N_kg_ha'] = get_validated_float(\"Enter Nitrogen content (N_kg_ha)\", 120)\n",
        "    data['P_kg_ha'] = get_validated_float(\"Enter Phosphorus content (P_kg_ha)\", 60)\n",
        "    data['K_kg_ha'] = get_validated_float(\"Enter Potassium content (K_kg_ha)\", 50)\n",
        "    data['organic_carbon_%'] = get_validated_float(\"Enter organic carbon percentage\", 0.75)\n",
        "    data['moisture_%'] = get_validated_float(\"Enter soil moisture percentage\", 40.2)\n",
        "    data['ndvi'] = get_validated_float(\"Enter current NDVI value\", 0.72)\n",
        "    data['evi'] = get_validated_float(\"Enter current EVI value\", 0.51)\n",
        "    data['average_rain_fall_mm_per_year'] = get_validated_float(\"Enter average annual rainfall (mm)\", 1450)\n",
        "    data['pesticides_tonnes'] = get_validated_float(\"Enter pesticides used (tonnes)\", 1100)\n",
        "    data['avg_temp'] = get_validated_float(\"Enter average temperature (°C)\", 29.5)\n",
        "    return data\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    farmer_input = get_user_input()\n",
        "    predicted_yield = predict_yield(farmer_input)\n",
        "    historical_avg = get_historical_average(farmer_input['Item'])\n",
        "\n",
        "    print(\"\\n-------------------------------------------\")\n",
        "    print(\"--- 🌾 Comprehensive Yield Analysis 🌾 ---\")\n",
        "\n",
        "    if isinstance(predicted_yield, float):\n",
        "        print(f\"📈 Predicted Yield: {predicted_yield:.2f} hg/ha\")\n",
        "        if isinstance(historical_avg, float):\n",
        "            print(f\"📊 Historical Avg. for {farmer_input['Item']}: {historical_avg:.2f} hg/ha\")\n",
        "\n",
        "\n",
        "        recommendations = generate_recommendations(farmer_input, predicted_yield, historical_avg)\n",
        "\n",
        "        if recommendations:\n",
        "            print(\"\\n--- Actionable Insights & Recommendations ---\")\n",
        "            for insight in recommendations:\n",
        "                print(f\"• {insight}\")\n",
        "    else:\n",
        "        print(f\"Prediction Error: {predicted_yield}\")\n",
        "    print(\"-------------------------------------------\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "euKv4TTx6wOQ",
        "outputId": "6e646b15-f7fe-4144-ff0d-a5eb2b9ef784"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Please Enter the Current Farm Data ---\n",
            "Enter the crop type. Available options: ['Cassava', 'Groundnut', 'Maize', 'Potatoes', 'Rice', 'Sorghum', 'Soybeans', 'Sweet potatoes', 'Wheat']\n",
            "> Maize\n",
            "Enter farm area in hectares (e.g., 5): 5\n",
            "Enter the irrigation type. Available options: ['Rainfed', 'Canal', 'Borewell', 'Drip']\n",
            "> Canal\n",
            "Enter soil pH (e.g., 6.8): 6.8\n",
            "Enter Nitrogen content (N_kg_ha) (e.g., 120): 120\n",
            "Enter Phosphorus content (P_kg_ha) (e.g., 60): 60\n",
            "Enter Potassium content (K_kg_ha) (e.g., 50): 50\n",
            "Enter organic carbon percentage (e.g., 0.75): 0.75\n",
            "Enter soil moisture percentage (e.g., 40.2): 40\n",
            "Enter current NDVI value (e.g., 0.72): 0.72\n",
            "Enter current EVI value (e.g., 0.51): 0.51\n",
            "Enter average annual rainfall (mm) (e.g., 1450): 1400\n",
            "Enter pesticides used (tonnes) (e.g., 1100): 1100\n",
            "Enter average temperature (°C) (e.g., 29.5): 30\n",
            "\n",
            "-------------------------------------------\n",
            "--- 🌾 Comprehensive Yield Analysis 🌾 ---\n",
            "📈 Predicted Yield: 161080.86 hg/ha\n",
            "-------------------------------------------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import pickle\n",
        "import os\n",
        "import numpy as np\n",
        "\n",
        "def get_historical_average(crop_item, data_path='odisha_agri_data.xlsx - Sheet1.csv'):\n",
        "    if not os.path.exists(data_path): return \"Historical data file not found.\"\n",
        "    df = pd.read_csv(data_path)\n",
        "    crop_data = df[df['Item'] == crop_item]\n",
        "    if crop_data.empty: return \"No historical data found for this crop.\"\n",
        "    return crop_data['historical_yield_hg_ha'].mean()\n",
        "\n",
        "\n",
        "def predict_yield(new_data, pipeline_path='final_crop_yield_pipeline.pkl'):\n",
        "    if not os.path.exists(pipeline_path): return f\"Error: Model file not found at '{pipeline_path}'.\"\n",
        "    with open(pipeline_path, 'rb') as f:\n",
        "        pipeline = pickle.load(f)\n",
        "    input_df = pd.DataFrame([new_data])\n",
        "    prediction = pipeline.predict(input_df)\n",
        "    return prediction[0]\n",
        "def find_optimal_inputs(base_input, pipeline_path='final_crop_yield_pipeline.pkl'):\n",
        "    \"\"\"\n",
        "    Simulates changes to controllable inputs to find the best recommendation.\n",
        "    \"\"\"\n",
        "    if not os.path.exists(pipeline_path): return None, \"Model file not found.\"\n",
        "\n",
        "    controllable_factors = {\n",
        "        \"N_kg_ha\": np.linspace(base_input[\"N_kg_ha\"] * 0.9, base_input[\"N_kg_ha\"] * 1.2, 4),\n",
        "        \"P_kg_ha\": np.linspace(base_input[\"P_kg_ha\"] * 0.9, base_input[\"P_kg_ha\"] * 1.2, 4),\n",
        "        \"K_kg_ha\": np.linspace(base_input[\"K_kg_ha\"] * 0.9, base_input[\"K_kg_ha\"] * 1.2, 4),\n",
        "        \"pH\": np.linspace(base_input[\"pH\"] - 0.5, base_input[\"pH\"] + 0.5, 3)\n",
        "    }\n",
        "\n",
        "    best_yield = base_input['predicted_yield']\n",
        "    best_recommendation = \"Maintain current inputs for best results.\"\n",
        "\n",
        "\n",
        "    for factor, values in controllable_factors.items():\n",
        "        for value in values:\n",
        "\n",
        "            temp_input = base_input.copy()\n",
        "            temp_input[factor] = value\n",
        "\n",
        "\n",
        "            new_predicted_yield = predict_yield(temp_input, pipeline_path)\n",
        "\n",
        "\n",
        "            if new_predicted_yield > best_yield:\n",
        "                best_yield = new_predicted_yield\n",
        "                improvement = ((new_predicted_yield - base_input['predicted_yield']) / base_input['predicted_yield']) * 100\n",
        "                best_recommendation = f\"Consider adjusting {factor} to {value:.2f}. This could potentially increase yield by {improvement:.2f}%.\"\n",
        "\n",
        "    return best_recommendation\n",
        "\n",
        "\n",
        "def get_user_input():\n",
        "\n",
        "    print(\"--- Please Enter the Current Farm Data ---\")\n",
        "    known_items = ['Cassava', 'Groundnut', 'Maize', 'Potatoes', 'Rice', 'Sorghum', 'Soybeans', 'Sweet potatoes', 'Wheat']\n",
        "    known_irrigation = ['Rainfed', 'Canal', 'Borewell', 'Drip']\n",
        "    data = {}\n",
        "    def get_validated_float(p, e):\n",
        "        while True:\n",
        "            try: return float(input(f\"{p} (e.g., {e}): \"))\n",
        "            except ValueError: print(\"Invalid input. Please enter a number.\")\n",
        "    def get_validated_category(p, o):\n",
        "        while True:\n",
        "            print(f\"{p} Options: {o}\")\n",
        "            user_input = input(\"> \").strip().title()\n",
        "            if user_input in o: return user_input\n",
        "            else: print(\"Invalid option.\")\n",
        "    data['Item'] = get_validated_category(\"Enter crop type.\", known_items)\n",
        "    data['Year'] = 2025\n",
        "    data['area_hectares'] = get_validated_float(\"Enter area in hectares\", 5)\n",
        "    data['irrigation_type'] = get_validated_category(\"Enter irrigation type.\", known_irrigation)\n",
        "    data['pH'] = get_validated_float(\"Enter soil pH\", 6.8)\n",
        "    data['N_kg_ha'] = get_validated_float(\"Enter Nitrogen (N_kg_ha)\", 120)\n",
        "    data['P_kg_ha'] = get_validated_float(\"Enter Phosphorus (P_kg_ha)\", 60)\n",
        "    data['K_kg_ha'] = get_validated_float(\"Enter Potassium (K_kg_ha)\", 50)\n",
        "    data['organic_carbon_%'] = get_validated_float(\"Enter organic carbon %\", 0.75)\n",
        "    data['moisture_%'] = get_validated_float(\"Enter moisture %\", 40.2)\n",
        "    data['ndvi'] = get_validated_float(\"Enter current NDVI\", 0.72)\n",
        "    data['evi'] = get_validated_float(\"Enter current EVI\", 0.51)\n",
        "    data['average_rain_fall_mm_per_year'] = get_validated_float(\"Enter avg annual rainfall (mm)\", 1450)\n",
        "    data['pesticides_tonnes'] = get_validated_float(\"Enter pesticides used (tonnes)\", 1100)\n",
        "    data['avg_temp'] = get_validated_float(\"Enter avg temperature (°C)\", 29.5)\n",
        "    return data\n",
        "\n",
        "def generate_report(farmer_input, predicted_yield, historical_avg, recommendation):\n",
        "    print(\"\\n\\n\" + \"=\"*60)\n",
        "    print(\"--- 🌾 CROP YIELD OPTIMIZATION & RECOMMENDATION REPORT 🌾 ---\")\n",
        "    print(\"=\"*60)\n",
        "    print(f\"Date: {pd.to_datetime('today').strftime('%Y-%m-%d')} | Location: Odisha | Crop: {farmer_input['Item']}\")\n",
        "    print(\"-\"*60)\n",
        "\n",
        "    print(\"\\n📈 YIELD FORECAST\")\n",
        "    if isinstance(predicted_yield, float):\n",
        "        print(f\"  - Model Forecast: {predicted_yield:.2f} hg/ha\")\n",
        "        if isinstance(historical_avg, float):\n",
        "            print(f\"  - Historical Average: {historical_avg:.2f} hg/ha\")\n",
        "            diff = (predicted_yield - historical_avg) / historical_avg if historical_avg else 0\n",
        "            if diff > 0.05:\n",
        "                print(\"  - Outlook: Forecast is significantly ABOVE average.\")\n",
        "            elif diff < -0.05:\n",
        "                print(\"  - Outlook: Forecast is significantly BELOW average.\")\n",
        "            else:\n",
        "                print(\"  - Outlook: Forecast is ON PAR with the average.\")\n",
        "    else:\n",
        "        print(f\"  - Prediction Error: {predicted_yield}\")\n",
        "\n",
        "    print(\"\\n💡 OPTIMIZATION RECOMMENDATION\")\n",
        "    print(f\"  ➡️ {recommendation}\")\n",
        "\n",
        "    print(\"\\n\" + \"=\"*60)\n",
        "    print(\"Disclaimer: This is a model-based forecast and recommendation.\")\n",
        "    print(\"Always consult with a local agronomist before making significant changes.\")\n",
        "    print(\"=\"*60)\n",
        "\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    farmer_input = get_user_input()\n",
        "\n",
        "    predicted_yield = predict_yield(farmer_input)\n",
        "\n",
        "\n",
        "    if isinstance(predicted_yield, float):\n",
        "        farmer_input['predicted_yield'] = predicted_yield # Add prediction to input for optimizer\n",
        "\n",
        "\n",
        "        recommendation = find_optimal_inputs(farmer_input)\n",
        "\n",
        "        historical_avg = get_historical_average(farmer_input['Item'])\n",
        "\n",
        "        generate_report(farmer_input, predicted_yield, historical_avg, recommendation)\n",
        "    else:\n",
        "\n",
        "        print(f\"\\nCould not generate report due to an error: {predicted_yield}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b-jhvq3YEBgF",
        "outputId": "f8cb2471-9606-499c-e496-94ee4a4ced6a"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Please Enter the Current Farm Data ---\n",
            "Enter crop type. Options: ['Cassava', 'Groundnut', 'Maize', 'Potatoes', 'Rice', 'Sorghum', 'Soybeans', 'Sweet potatoes', 'Wheat']\n",
            "> maize\n",
            "Enter area in hectares (e.g., 5): 4\n",
            "Enter irrigation type. Options: ['Rainfed', 'Canal', 'Borewell', 'Drip']\n",
            "> drip\n",
            "Enter soil pH (e.g., 6.8): 4\n",
            "Enter Nitrogen (N_kg_ha) (e.g., 120): 456\n",
            "Enter Phosphorus (P_kg_ha) (e.g., 60): 45\n",
            "Enter Potassium (K_kg_ha) (e.g., 50): 54\n",
            "Enter organic carbon % (e.g., 0.75): 0.77\n",
            "Enter moisture % (e.g., 40.2): 45\n",
            "Enter current NDVI (e.g., 0.72): 1\n",
            "Enter current EVI (e.g., 0.51): 1\n",
            "Enter avg annual rainfall (mm) (e.g., 1450): 1223\n",
            "Enter pesticides used (tonnes) (e.g., 1100): 2222\n",
            "Enter avg temperature (°C) (e.g., 29.5): 23\n",
            "\n",
            "\n",
            "============================================================\n",
            "--- 🌾 CROP YIELD OPTIMIZATION & RECOMMENDATION REPORT 🌾 ---\n",
            "============================================================\n",
            "Date: 2025-09-25 | Location: Odisha | Crop: Maize\n",
            "------------------------------------------------------------\n",
            "\n",
            "📈 YIELD FORECAST\n",
            "  - Model Forecast: 323561.80 hg/ha\n",
            "\n",
            "💡 OPTIMIZATION RECOMMENDATION\n",
            "  ➡️ Consider adjusting N_kg_ha to 410.40. This could potentially increase yield by 0.13%.\n",
            "\n",
            "============================================================\n",
            "Disclaimer: This is a model-based forecast and recommendation.\n",
            "Always consult with a local agronomist before making significant changes.\n",
            "============================================================\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import pickle\n",
        "import os\n",
        "\n",
        "def get_historical_average(crop_item, data_path='odisha_agri_data.xlsx - Sheet1.csv'):\n",
        "    if not os.path.exists(data_path): return \"Historical data file not found.\"\n",
        "    df = pd.read_csv(data_path)\n",
        "    crop_data = df[df['Item'] == crop_item]\n",
        "    if crop_data.empty: return \"No historical data found for this crop.\"\n",
        "    return crop_data['historical_yield_hg_ha'].mean()\n",
        "\n",
        "\n",
        "def predict_yield(new_data, pipeline_path='final_crop_yield_pipeline.pkl'):\n",
        "    if not os.path.exists(pipeline_path): return f\"Error: Model file not found at '{pipeline_path}'.\"\n",
        "    with open(pipeline_path, 'rb') as f:\n",
        "        pipeline = pickle.load(f)\n",
        "    input_df = pd.DataFrame([new_data])\n",
        "    prediction = pipeline.predict(input_df)\n",
        "    return prediction[0]\n",
        "\n",
        "\n",
        "def generate_recommendations(input_data, predicted_yield, historical_avg):\n",
        "    insights = []\n",
        "    item = input_data['Item']\n",
        "    if isinstance(predicted_yield, float) and isinstance(historical_avg, float):\n",
        "        percent_change = ((predicted_yield - historical_avg) / historical_avg) * 100\n",
        "        if percent_change > 5: insights.append(f\"Yield Forecast: The predicted yield is {percent_change:.2f}% ABOVE the historical average for {item}. Current conditions appear optimal.\")\n",
        "        elif percent_change < -5: insights.append(f\"Yield Alert: The predicted yield is {abs(percent_change):.2f}% BELOW the historical average. Review the suggestions below.\")\n",
        "        else: insights.append(\"Yield Outlook: The predicted yield is on par with the historical average.\")\n",
        "    if input_data['pH'] < 6.0: insights.append(f\"Soil Acidity: The soil pH of {input_data['pH']} is acidic. Consider applying lime to raise the pH.\")\n",
        "    elif input_data['pH'] > 7.5: insights.append(f\"Soil Alkalinity: The soil pH of {input_data['pH']} is alkaline. Consider using soil acidifiers like sulfur.\")\n",
        "    if input_data['organic_carbon_%'] < 0.5: insights.append(f\"Organic Carbon: The level ({input_data['organic_carbon_%']}%) is low. Consider adding compost or manure.\")\n",
        "    if input_data['ndvi'] < 0.5: insights.append(f\"Vegetation Index: The NDVI value of {input_data['ndvi']} is low, which may indicate crop stress.\")\n",
        "    elif input_data['ndvi'] > 0.75: insights.append(f\"Vegetation Index: The NDVI value of {input_data['ndvi']} is very high, indicating a healthy crop canopy.\")\n",
        "    return insights\n",
        "\n",
        "\n",
        "def get_user_input():\n",
        "    print(\"--- Please Enter the Current Farm Data ---\")\n",
        "    known_items = ['Cassava', 'Groundnut', 'Maize', 'Potatoes', 'Rice', 'Sorghum', 'Soybeans', 'Sweet potatoes', 'Wheat']\n",
        "    known_irrigation = ['Rainfed', 'Canal', 'Borewell', 'Drip']\n",
        "    data = {}\n",
        "    def get_validated_float(p, e):\n",
        "        while True:\n",
        "            try: return float(input(f\"{p} (e.g., {e}): \"))\n",
        "            except ValueError: print(\"Invalid input. Please enter a number.\")\n",
        "    def get_validated_category(p, o):\n",
        "        while True:\n",
        "            print(f\"{p} Options: {o}\")\n",
        "            user_input = input(\"> \").strip().title()\n",
        "            if user_input in o: return user_input\n",
        "            else: print(\"Invalid option.\")\n",
        "    data['Item'] = get_validated_category(\"Enter crop type.\", known_items)\n",
        "    data['Year'] = 2025\n",
        "    data['area_hectares'] = get_validated_float(\"Enter area in hectares\", 5)\n",
        "    data['irrigation_type'] = get_validated_category(\"Enter irrigation type.\", known_irrigation)\n",
        "    data['pH'] = get_validated_float(\"Enter soil pH\", 6.8)\n",
        "    data['N_kg_ha'] = get_validated_float(\"Enter Nitrogen (N_kg_ha)\", 120)\n",
        "    data['P_kg_ha'] = get_validated_float(\"Enter Phosphorus (P_kg_ha)\", 60)\n",
        "    data['K_kg_ha'] = get_validated_float(\"Enter Potassium (K_kg_ha)\", 50)\n",
        "    data['organic_carbon_%'] = get_validated_float(\"Enter organic carbon %\", 0.75)\n",
        "    data['moisture_%'] = get_validated_float(\"Enter moisture %\", 40.2)\n",
        "    data['ndvi'] = get_validated_float(\"Enter current NDVI\", 0.72)\n",
        "    data['evi'] = get_validated_float(\"Enter current EVI\", 0.51)\n",
        "    data['average_rain_fall_mm_per_year'] = get_validated_float(\"Enter avg annual rainfall (mm)\", 1450)\n",
        "    data['pesticides_tonnes'] = get_validated_float(\"Enter pesticides used (tonnes)\", 1100)\n",
        "    data['avg_temp'] = get_validated_float(\"Enter avg temperature (°C)\", 29.5)\n",
        "    return data\n",
        "\n",
        "\n",
        "def generate_report(farmer_input, predicted_yield, historical_avg, recommendations):\n",
        "    \"\"\"\n",
        "    Formats all the information into a final, user-friendly report.\n",
        "    \"\"\"\n",
        "    print(\"\\n\\n\" + \"=\"*55)\n",
        "    print(\"--- 🌾 CROP YIELD FORECAST & RECOMMENDATION REPORT 🌾 ---\")\n",
        "    print(\"=\"*55)\n",
        "    print(f\"Date: {pd.to_datetime('today').strftime('%Y-%m-%d')} | Location: Odisha\")\n",
        "    print(f\"Crop Type: {farmer_input['Item']}\")\n",
        "    print(\"-\"*55)\n",
        "\n",
        "\n",
        "    print(\"\\n📈 PREDICTION SUMMARY\")\n",
        "    if isinstance(predicted_yield, float):\n",
        "        print(f\"  - Model Forecast: {predicted_yield:.2f} hg/ha\")\n",
        "        if isinstance(historical_avg, float):\n",
        "            print(f\"  - Historical Average for {farmer_input['Item']}: {historical_avg:.2f} hg/ha\")\n",
        "\n",
        "            diff = (predicted_yield - historical_avg) / historical_avg if historical_avg else 0\n",
        "            bar = \"█\" * int((1 + diff) * 10)\n",
        "            print(f\"  - Performance vs. Average: [{bar}]\")\n",
        "    else:\n",
        "        print(f\"  - Prediction Error: {predicted_yield}\")\n",
        "\n",
        "    print(\"\\n💡 ACTIONABLE INSIGHTS & RECOMMENDATIONS\")\n",
        "    if recommendations:\n",
        "        for insight in recommendations:\n",
        "            print(f\"  • {insight}\")\n",
        "    else:\n",
        "        print(\"  • No specific recommendations to show at this time.\")\n",
        "\n",
        "    print(\"\\n\" + \"=\"*55)\n",
        "    print(\"Disclaimer: This is a model-based forecast. Actual results may vary.\")\n",
        "    print(\"=\"*55)\n",
        "\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    farmer_input = get_user_input()\n",
        "    predicted_yield = predict_yield(farmer_input)\n",
        "    historical_avg = get_historical_average(farmer_input['Item'])\n",
        "    recommendations = generate_recommendations(farmer_input, predicted_yield, historical_avg)\n",
        "\n",
        "    generate_report(farmer_input, predicted_yield, historical_avg, recommendations)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a9VCrRQd7SVv",
        "outputId": "a44dd6f2-d1dc-4842-c3fa-773e8c38e109"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Please Enter the Current Farm Data ---\n",
            "Enter crop type. Options: ['Cassava', 'Groundnut', 'Maize', 'Potatoes', 'Rice', 'Sorghum', 'Soybeans', 'Sweet potatoes', 'Wheat']\n",
            "> rice\n",
            "Enter area in hectares (e.g., 5): 5\n",
            "Enter irrigation type. Options: ['Rainfed', 'Canal', 'Borewell', 'Drip']\n",
            "> canal\n",
            "Enter soil pH (e.g., 6.8): 7\n",
            "Enter Nitrogen (N_kg_ha) (e.g., 120): 100\n",
            "Enter Phosphorus (P_kg_ha) (e.g., 60): 78\n",
            "Enter Potassium (K_kg_ha) (e.g., 50): 78\n",
            "Enter organic carbon % (e.g., 0.75): 0.87\n",
            "Enter moisture % (e.g., 40.2): 65\n",
            "Enter current NDVI (e.g., 0.72): 0.56\n",
            "Enter current EVI (e.g., 0.51): 0.47\n",
            "Enter avg annual rainfall (mm) (e.g., 1450): 1234\n",
            "Enter pesticides used (tonnes) (e.g., 1100): 1234\n",
            "Enter avg temperature (°C) (e.g., 29.5): 34\n",
            "\n",
            "\n",
            "=======================================================\n",
            "--- 🌾 CROP YIELD FORECAST & RECOMMENDATION REPORT 🌾 ---\n",
            "=======================================================\n",
            "Date: 2025-09-25 | Location: Odisha\n",
            "Crop Type: Rice\n",
            "-------------------------------------------------------\n",
            "\n",
            "📈 PREDICTION SUMMARY\n",
            "  - Model Forecast: 181548.70 hg/ha\n",
            "\n",
            "💡 ACTIONABLE INSIGHTS & RECOMMENDATIONS\n",
            "  • No specific recommendations to show at this time.\n",
            "\n",
            "=======================================================\n",
            "Disclaimer: This is a model-based forecast. Actual results may vary.\n",
            "=======================================================\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "cR0y3p3V9DXh"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}